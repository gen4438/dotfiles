# Common shell configuration for bash and zsh
# This file contains aliases, functions, and environment variables
# that are shared between bash and zsh
# Based on bash configuration structure

# Helper function to add to PATH without duplicates
# Works in both bash and zsh
add_to_path() {
    if [[ -d "$1" ]] && [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1:$PATH"
        # Debug: uncomment to trace PATH additions
        # echo "Added to PATH: $1 (from ${BASH_SOURCE[1]:-$0})" >&2
    fi
}

# Remove PATH duplicates with forward priority (keep first occurrence)
remove_path_duplicates() {
    if [ -n "$PATH" ]; then
        local new_path=""
        local old_ifs="$IFS"
        IFS=':'
        for dir in $PATH; do
            # Skip empty directories
            [ -z "$dir" ] && continue
            # Add only if not already present
            case ":$new_path:" in
                *":$dir:"*) 
                    # Already exists, skip
                    ;;  
                *) 
                    # New directory, add it
                    if [ -z "$new_path" ]; then
                        new_path="$dir"
                    else
                        new_path="$new_path:$dir"
                    fi
                    ;;
            esac
        done
        IFS="$old_ifs"
        # Export the cleaned PATH
        export PATH="$new_path"
    fi
}

# Shell detection for compatibility
if [ -n "$ZSH_VERSION" ]; then
    export SHELL_TYPE="zsh"
    export CONFIG_DIR="$HOME/.zsh"
elif [ -n "$BASH_VERSION" ]; then
    export SHELL_TYPE="bash"
    export CONFIG_DIR="$HOME/.bash"
else
    export SHELL_TYPE="unknown"
    export CONFIG_DIR="$HOME/.shell"
fi

# Environment variables
export EDITOR="nvim"
export VISUAL="nvim"
export PAGER="less"

# Common aliases
alias ll='ls -alF'
alias la='ls -A' 
alias l='ls -CF'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Git aliases
alias g='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log'
alias gd='git diff'

# Directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Safety aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive formats
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"   ;;
            *.tar.gz)    tar xzf "$1"   ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *)           echo "'$1' cannot be extracted" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# OS-specific configurations
{{- if eq .chezmoi.os "linux" }}
# Linux specific aliases
alias ls='ls --color=auto'
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

# Add snap binaries to PATH if exists
add_to_path "/snap/bin"
{{- else if eq .chezmoi.os "darwin" }}
# macOS specific aliases
alias ls='ls -G'
{{- end }}

# PATH Priority Order Policy:
# 1. Version manager shims (pyenv, nvm) - highest priority for language switching
# 2. User binaries (~/.local/bin, ~/bin) - personal scripts and tools
# 3. Language-specific paths (GOPATH/bin, cargo/bin) - compiled binaries
# 4. Development tools (fzf, etc.) - frequently used utilities
# 5. System binaries (/usr/local/bin, /usr/bin) - OS provided tools (added by system)

# Add user's private bin to PATH if it exists
add_to_path "$HOME/.local/bin"
add_to_path "$HOME/bin"

# Programming language specific configurations
# Go
if command -v go &> /dev/null; then
    export GOPATH="$HOME/go"
    add_to_path "$GOPATH/bin"
fi

# Rust (this sources cargo env which adds ~/.cargo/bin to PATH)
if [ -f "$HOME/.cargo/env" ]; then
    . "$HOME/.cargo/env"
fi

# fzf (fuzzy finder) - important development tool
add_to_path "$HOME/.fzf/bin"

{{- if eq .chezmoi.os "android" }}
# Android/Termux: Use system packages (pkg install python nodejs)
# Global npm/pip packages will be installed via system package manager
{{- else }}
# Node.js (nvm) - standard initialization
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Python (pyenv) - standard initialization with prompt control
export PYENV_ROOT="$HOME/.pyenv"
add_to_path "$PYENV_ROOT/bin"
if command -v pyenv &> /dev/null; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# Disable automatic prompt modification - we'll handle it ourselves
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
export VIRTUAL_ENV_DISABLE_PROMPT=1
{{- end }}

# Poetry (Python package manager)
add_to_path "$HOME/.poetry/bin"

# pipenv configuration
export PIPENV_SKIP_LOCK=true

{{- if ne .chezmoi.os "android" }}
# Remove specific pyenv shims to use system versions
# These commands work better with system versions rather than pyenv-managed ones
for cmd in black blackd grip rg gettext envsubst rst2man.py; do
    if command -v "/usr/bin/$cmd" >/dev/null 2>&1 && [[ -f "$HOME/.pyenv/shims/$cmd" ]]; then
        rm -f "$HOME/.pyenv/shims/$cmd"
    fi
done
{{- end }}

# Kubernetes plugins (Krew)
add_to_path "${KREW_ROOT:-$HOME/.krew}/bin"

# Kubernetes configuration
if command -v kubectl >/dev/null 2>&1; then
    # kubectl aliases (https://github.com/ahmetb/kubectl-aliases)
    [[ -f ~/.kubectl_aliases ]] && source ~/.kubectl_aliases
    complete -o default -F __start_kubectl k
    export KUBE_EDITOR=vim
fi

# direnv (directory-specific environment variables)
if command -v direnv >/dev/null 2>&1; then
    eval "$(direnv hook ${SHELL_TYPE})"
fi

# Git internationalization
export GIT_INTERNAL_GETTEXT_TEST_FALLBACKS=1

# fzf (fuzzy finder) with ripgrep integration
if command -v rg >/dev/null 2>&1; then
    export FZF_DEFAULT_OPTS='--bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-y:toggle-all,ctrl-s:toggle-sort'
    export FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!.git/*'"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# fzf completions for various commands (shell-specific)
if command -v _fzf_setup_completion >/dev/null 2>&1; then
    _fzf_setup_completion path ag git kubectl ll vim
    _fzf_setup_completion dir tree
fi

# Disable Ctrl+S/Ctrl+Q flow control (allows Ctrl+S for search)  
if [[ "$SHELL_TYPE" == "bash" ]]; then
    stty -ixon
fi

# CUDA Toolkit
if [[ -d "/usr/local/cuda" ]]; then
    export CUDA_ROOT="/usr/local/cuda"
    export CPATH="/usr/local/cuda/include:$CPATH"
    add_to_path "/usr/local/cuda/bin"
    export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
fi

# Java
if [[ -n "$JAVA_HOME" && -d "$JAVA_HOME" ]]; then
    add_to_path "$JAVA_HOME/bin"
fi

# Modular Configuration Loading (bash-style)
# Load custom configuration from organized directories

# Aliases
if [[ -d "$CONFIG_DIR/aliases.d" ]]; then
    for script in "$CONFIG_DIR/aliases.d"/*; do
        [[ -f "$script" ]] && source "$script"
    done
fi

# Completions (shell-specific)
if [[ -d "$CONFIG_DIR/completion.d" ]]; then
    for script in "$CONFIG_DIR/completion.d"/*; do
        [[ -f "$script" ]] && source "$script"
    done
fi

# Custom functions
if [[ -d "$CONFIG_DIR/functions.d" ]]; then
    for script in "$CONFIG_DIR/functions.d"/*; do
        [[ -f "$script" ]] && source "$script"
    done
fi

# Key bindings
if [[ -d "$CONFIG_DIR/keybindings.d" ]]; then
    for script in "$CONFIG_DIR/keybindings.d"/*; do
        [[ -f "$script" ]] && source "$script"
    done
fi

# Load local configurations if exists
if [ -f "$HOME/.shell_local" ]; then
    source "$HOME/.shell_local"
fi

# Clean up PATH duplicates after all configurations are loaded
remove_path_duplicates

# Shared prompt functions for bash and zsh
# Show Python virtual environment (when using direnv or explicit venv activation)
show_virtual_env() {
    # Python venv environment (explicit activation)
    if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
        echo "($(basename "$VIRTUAL_ENV"))"
    # pyenv environment (when managed by direnv)
    elif [[ -n "$DIRENV_DIR" ]] && command -v pyenv >/dev/null 2>&1 && [[ "$(pyenv version-name)" != "system" ]]; then
        echo "($(pyenv version-name))"
    fi
}

# Show Node.js version when using nvm with direnv
show_nvm_version() {
    if [[ -n "$DIRENV_NVM_VERSION" && -n "$DIRENV_DIR" ]]; then
        echo "(nvm-$(node --version))"
    fi
}