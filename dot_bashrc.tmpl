{{- if eq .chezmoi.os "linux" }}
# Ubuntu/Debian default bashrc configuration
{{ template "ubuntu_bashrc.tmpl" . }}
{{- else }}
# Default minimal bash configuration for non-Linux systems
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Basic history settings
HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000

# Basic shell options
shopt -s checkwinsize
{{- end }}

### User Customizations

# Load common shell configuration early (shared with zsh)
# This includes add_to_path function and other shared utilities
{{ template "shell_common.tmpl" . }}

# Byobu integration
[ -r ~/.config/byobu/prompt ] && source ~/.config/byobu/prompt   #byobu-prompt#

# Vi mode for command line editing
set -o vi

# Extended history settings (override default HISTSIZE=1000)
HISTSIZE=9999

# WSL (Windows Subsystem for Linux) specific settings
if [[ -n "$IS_WSL" || -n "$WSL_DISTRO_NAME" ]]; then
    # Windows Explorer alias
    alias e='explorer.exe'
    
    # X11 display for WSL (GWSL configuration)
    # Note: Adjust IP range according to your network setup
    export DISPLAY=$(ipconfig.exe /all | grep -a IPv4 | grep -o -e "192.168.11.[0-9]\{1,3\}"):0.0
fi

# Development tools are now configured in shared template

# Environment Configuration
# Load user-specific environment variables
if [[ -f "$HOME/.env" ]]; then
    set -a; source "$HOME/.env"; set +a
fi

# External Tools Integration
[[ -f ~/.fzf.bash ]] && source ~/.fzf.bash
[[ -f ~/bin/z/z.sh ]] && source ~/bin/z/z.sh
[[ -f ~/bin/fz/fz.sh ]] && source ~/bin/fz/fz.sh
[[ -f ~/bin/tmux-xpanes/activate.sh ]] && source ~/bin/tmux-xpanes/activate.sh

# Version Managers Initialization
{{- if eq .chezmoi.os "android" }}
# Android/Termux: Use system packages instead of version managers
# Install: pkg install python nodejs
# For global packages: npm install -g <package> or pip install <package>
{{- else }}

# anyenv (any language environment manager)
if command -v anyenv >/dev/null 2>&1; then
    eval "$(anyenv init -)"
fi

# goenv PATH fix (see: https://github.com/go-nv/goenv/issues/247)
if [[ -n "$GOENV_ROOT" ]]; then
    add_to_path "$GOENV_ROOT/shims"
fi

# pyenv (Python version manager)
if command -v pyenv >/dev/null 2>&1; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# pipenv configuration
export PIPENV_SKIP_LOCK=true

# Remove specific pyenv shims to use system versions
# These commands work better with system versions rather than pyenv-managed ones
for cmd in black blackd grip rg gettext envsubst rst2man.py; do
    if command -v "/usr/bin/$cmd" >/dev/null 2>&1 && [[ -f "$HOME/.pyenv/shims/$cmd" ]]; then
        rm -f "$HOME/.pyenv/shims/$cmd"
    fi
done

# Node Version Manager (nvm)
export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && \. "$NVM_DIR/bash_completion"
{{- end }}

# Tool-Specific Configuration

# Git internationalization
export GIT_INTERNAL_GETTEXT_TEST_FALLBACKS=1

# fzf (fuzzy finder) with ripgrep integration
if command -v rg >/dev/null 2>&1; then
    export FZF_DEFAULT_OPTS='--bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-y:toggle-all,ctrl-s:toggle-sort'
    export FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!.git/*'"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# Kubernetes configuration
if command -v kubectl >/dev/null 2>&1; then
    # kubectl aliases (https://github.com/ahmetb/kubectl-aliases)
    [[ -f ~/.kubectl_aliases ]] && source ~/.kubectl_aliases
    complete -o default -F __start_kubectl k
    export KUBE_EDITOR=vim
fi

# direnv (directory-specific environment variables)
if command -v direnv >/dev/null 2>&1; then
    eval "$(direnv hook bash)"
fi

# Common shell configuration already loaded above

# Prompt Customization
# Disable pyenv's automatic virtualenv prompt (we'll handle it ourselves)
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# Show Python virtual environment in prompt (when using direnv)
show_virtual_env() {
    if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
        echo "($(basename "$VIRTUAL_ENV"))"
    fi
}
export -f show_virtual_env
PS1='$(show_virtual_env)'$PS1

# Show Conda environment in prompt (when using direnv)
show_conda_env() {
    if [[ -n "$CONDA_DEFAULT_ENV" && -n "$DIRENV_DIR" ]]; then
        echo "($(basename "$CONDA_DEFAULT_ENV"))"
    fi
}
export -f show_conda_env
PS1='$(show_conda_env)'$PS1

# Show Node.js version in prompt (when using direnv with nvm)
show_nvm_version() {
    if [[ -n "$DIRENV_NVM_VERSION" && -n "$DIRENV_DIR" ]]; then
        echo "(node-$(node --version))"
    fi
}
export -f show_nvm_version
PS1='$(show_nvm_version)'$PS1

# Node.js local modules PATH
add_to_path "node_modules/bin"

# Additional Tool Configuration

# fzf completions for various commands
if command -v _fzf_setup_completion >/dev/null 2>&1; then
    _fzf_setup_completion path ag git kubectl ll vim
    _fzf_setup_completion dir tree
fi

# Disable Ctrl+S/Ctrl+Q flow control (allows Ctrl+S for search)
stty -ixon

# Rust Cargo environment
if [[ -f "$HOME/.cargo/env" ]]; then
    source "$HOME/.cargo/env"
fi
