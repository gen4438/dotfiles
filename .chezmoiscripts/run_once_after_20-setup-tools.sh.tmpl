{{ template "shebang-bash.tmpl" . }}
# Setup development tools after package installation
# script hash: {{ include ".chezmoiscripts/run_once_after_20-setup-tools.sh.tmpl" | sha256sum }}

set -e

echo "Setting up development tools..."

# Setup fzf
if [[ -d "$HOME/.fzf" ]]; then
    echo "Checking fzf setup..."
    # Check if fzf is already properly installed
    if [[ ! -f "$HOME/.fzf.bash" ]] || [[ ! -f "$HOME/.fzf.zsh" ]]; then
        echo "Setting up fzf..."
        cd "$HOME/.fzf"
        ./install --all --no-update-rc
        echo "✅ fzf setup completed"
    else
        echo "✅ fzf already configured"
    fi
fi

# Setup pyenv
if [[ -d "$HOME/.pyenv" ]]; then
    echo "Setting up pyenv..."
    
    # Initialize pyenv in current session
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    
    if command -v pyenv >/dev/null 2>&1; then
        eval "$(pyenv init -)"
        
        # Install latest Python if none installed
        if [[ -z "$(pyenv versions --bare)" ]]; then
            echo "Installing latest Python version..."
            LATEST_PYTHON=$(pyenv install --list | grep -E "^\s*3\.[0-9]+\.[0-9]+$" | tail -1 | xargs)
            if [[ -n "$LATEST_PYTHON" ]]; then
                pyenv install "$LATEST_PYTHON"
                pyenv global "$LATEST_PYTHON"
                echo "✅ Python $LATEST_PYTHON installed and set as global"
            fi
        fi
    fi
fi

# Setup nvm
if [[ -d "$HOME/.nvm" ]]; then
    echo "Setting up nvm..."
    
    # Source nvm in current session
    export NVM_DIR="$HOME/.nvm"
    [[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
    
    if command -v nvm >/dev/null 2>&1; then
        # Install latest LTS Node.js if none installed
        if [[ -z "$(nvm list | grep -v 'N/A')" ]]; then
            echo "Installing latest LTS Node.js..."
            nvm install --lts
            nvm use --lts
            nvm alias default lts/*
            echo "✅ Node.js LTS installed and set as default"
        fi
    fi
fi

# Setup anyenv
if [[ -d "$HOME/.anyenv" ]]; then
    echo "Setting up anyenv..."
    
    export PATH="$HOME/.anyenv/bin:$PATH"
    
    if command -v anyenv >/dev/null 2>&1; then
        # Initialize anyenv if not already done
        if [[ ! -d "$HOME/.config/anyenv/anyenv-install" ]]; then
            anyenv install --init
            echo "✅ anyenv initialized"
        fi
        
        eval "$(anyenv init -)"
    fi
fi

# Setup zplug and install plugins
echo "Setting up zplug plugins..."

{{- if eq .chezmoi.os "darwin" }}
# macOS - check brew zplug location
if [[ -f /opt/homebrew/opt/zplug/init.zsh ]]; then
    export ZPLUG_HOME=/opt/homebrew/opt/zplug
elif [[ -f /usr/local/opt/zplug/init.zsh ]]; then
    export ZPLUG_HOME=/usr/local/opt/zplug
elif [[ -f /opt/homebrew/share/zplug/init.zsh ]]; then
    export ZPLUG_HOME=/opt/homebrew/share/zplug
elif [[ -f /usr/local/share/zplug/init.zsh ]]; then
    export ZPLUG_HOME=/usr/local/share/zplug
elif [[ -f ~/.zplug/init.zsh ]]; then
    export ZPLUG_HOME=~/.zplug
fi
{{- else if eq .chezmoi.os "linux" }}
# Linux - check common zplug locations
if [[ -f /usr/share/zplug/init.zsh ]]; then
    export ZPLUG_HOME=/usr/share/zplug
elif [[ -f ~/.zplug/init.zsh ]]; then
    export ZPLUG_HOME=~/.zplug
fi
{{- end }}

if [[ -n "$ZPLUG_HOME" && -f "$ZPLUG_HOME/init.zsh" ]]; then
    echo "Checking zplug plugins..."
    
    # zplug requires zsh, so we run it in a zsh subshell
    if command -v zsh >/dev/null 2>&1; then
        # Check if plugins are already installed by checking for a key plugin directory
        ZPLUG_REPOS_DIR="$HOME/.zplug/repos"
        if [[ ! -d "$ZPLUG_REPOS_DIR/sindresorhus/pure" ]] || [[ ! -d "$ZPLUG_REPOS_DIR/robbyrussell/oh-my-zsh" ]]; then
            echo "Installing zplug plugins..."
            zsh -c "
                export ZPLUG_HOME='$ZPLUG_HOME'
                source '$ZPLUG_HOME/init.zsh'
                zstyle ':zplug:tag' depth 1
                
                # Define plugins (matching .zshrc.tmpl)
                zplug 'lib/completion', from:oh-my-zsh
                zplug 'lib/directories', from:oh-my-zsh
                zplug 'lib/functions', from:oh-my-zsh
                zplug 'lib/history', from:oh-my-zsh
                zplug 'plugins/git', from:oh-my-zsh
                zplug 'plugins/dotenv', from:oh-my-zsh
                zplug 'plugins/poetry', from:oh-my-zsh
                zplug 'plugins/npm', from:oh-my-zsh
                zplug 'plugins/kubectl', from:oh-my-zsh
                zplug 'plugins/gh', from:oh-my-zsh
                zplug 'plugins/vi-mode', from:oh-my-zsh
                zplug 'sindresorhus/pure', use:pure.zsh, from:github, as:theme
                zplug 'mafredri/zsh-async', from:github
                zplug 'zsh-users/zsh-history-substring-search', defer:2
                zplug 'changyuheng/fz', defer:1
                zplug 'rupa/z', use:z.sh
                zplug 'greymd/tmux-xpanes'
                zplug 'qoomon/zsh-lazyload'
                
                # Install plugins (ignore "no packages to install" error)
                zplug install || [[ \$? -eq 1 && \$(zplug list | wc -l) -gt 0 ]]
            "
            echo "✅ zplug plugins installed"
        else
            echo "✅ zplug plugins already installed"
        fi
    else
        echo "⚠️ zsh not available, skipping zplug plugin installation"
    fi
else
    echo "⚠️ zplug not found, skipping plugin installation"
fi

# Setup tmux plugin manager
if [[ -d "$HOME/.tmux/plugins/tpm" ]]; then
    echo "Checking tmux plugin manager..."
    
    # Install tmux plugins if tmux is available
    if command -v tmux >/dev/null 2>&1; then
        # Check if plugins are already installed by looking for common plugin directories
        if [[ ! -d "$HOME/.tmux/plugins/tmux-sensible" ]] && [[ ! -d "$HOME/.tmux/plugins/tmux-yank" ]]; then
            echo "Installing tmux plugins..."
            # Run TPM install script
            "$HOME/.tmux/plugins/tpm/bin/install_plugins"
            echo "✅ tmux plugins installed"
        else
            echo "✅ tmux plugins already installed"
        fi
    fi
fi

{{- if eq .chezmoi.os "darwin" }}
# macOS specific setup
echo "Setting up macOS specific tools..."

# Additional macOS-specific tools can be added here
{{- end }}

{{- if eq .chezmoi.os "linux" }}
# Linux specific setup
echo "Setting up Linux specific tools..."

# Setup direnv if available
if command -v direnv >/dev/null 2>&1; then
    echo "✅ direnv is available"
fi
{{- end }}

{{- if eq .chezmoi.os "windows" }}
# Windows specific setup (PowerShell)
echo "Setting up Windows specific tools..."

# This will be handled in PowerShell scripts
{{- end }}

echo "✅ Development tools setup completed"