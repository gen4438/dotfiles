{{- if eq .chezmoi.os "windows" -}}
# Install essential packages for Windows development environment

$ErrorActionPreference = "Stop"

Write-Host "Installing essential packages for Windows..."

# Install Scoop if not already installed
if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
    Write-Host "Installing Scoop package manager..."
    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
    Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
}

# Read scoop packages configuration
$packageFile = "{{ .chezmoi.sourceDir }}\scripts\packages\scoop.json"
$config = Get-Content $packageFile | ConvertFrom-Json

# Add required buckets
Write-Host "Adding Scoop buckets..."
foreach ($bucket in $config.buckets) {
    try {
        scoop bucket add $bucket
        Write-Host "✅ Added bucket: $bucket"
    } catch {
        Write-Warning "❌ Failed to add bucket $bucket : $_"
    }
}

# Install packages
Write-Host "Installing packages with Scoop..."
foreach ($app in $config.apps) {
    try {
        scoop install $app
        Write-Host "✅ $app installed successfully"
    } catch {
        Write-Warning "❌ Failed to install $app : $_"
    }
}

# Enable PowerShell execution policy for current user
Write-Host "Setting PowerShell execution policy..."
try {
    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
    Write-Host "✅ PowerShell execution policy set successfully"
} catch {
    Write-Warning "❌ Failed to set PowerShell execution policy: $_"
}

# Install PowerShell modules
Write-Host "Installing PowerShell modules..."
$modules = @("PSReadLine", "posh-git", "Terminal-Icons")
foreach ($module in $modules) {
    try {
        Install-Module -Name $module -Scope CurrentUser -Force -AllowClobber
        Write-Host "✅ $module installed successfully"
    } catch {
        Write-Warning "❌ Failed to install $module`: $_"
    }
}

Write-Host "✅ Essential packages installation completed"
{{- end }}