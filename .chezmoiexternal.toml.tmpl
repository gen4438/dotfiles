# Chezmoi External Tool Management
# This file manages external tools downloaded from git repositories or archives
# Cross-platform support for Linux, macOS, and Windows
# Cross-platform binary tools (archive-file format)
# fzf - Command-line fuzzy finder
{{- if eq .chezmoi.os "windows" }}
[".local/bin/fzf.exe"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "junegunn/fzf" (printf "fzf-*-windows_%s.zip" (.chezmoi.arch | replace "x86_64" "amd64")) | quote }}
    executable = true
    path = "fzf.exe"
    refreshPeriod = "168h"
{{- else }}
[".local/bin/fzf"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "junegunn/fzf" (printf "fzf-*-%s_%s.tar.gz" (eq .chezmoi.os "android" | ternary "linux" .chezmoi.os) (.chezmoi.arch | replace "x86_64" "amd64" | replace "aarch64" "arm64")) | quote }}
    executable = true
    path = "fzf"
    refreshPeriod = "168h"
{{- end }}

# delta - A syntax-highlighting pager for git, diff, grep, and blame output
{{- if eq .chezmoi.os "windows" }}
[".local/bin/delta.exe"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "dandavison/delta" (printf "delta-*-%s-pc-windows-msvc.zip" (.chezmoi.arch | replace "amd64" "x86_64")) | quote }}
    executable = true
    path = "delta.exe"
    stripComponents = 1
    refreshPeriod = "168h"
{{- else }}
[".local/bin/delta"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "dandavison/delta" (printf "delta-*-%s-%s.tar.gz" (.chezmoi.arch | replace "amd64" "x86_64") (eq .chezmoi.os "darwin" | ternary "apple-darwin" (eq .chezmoi.os "android" | ternary "unknown-linux-gnu" "unknown-linux-gnu"))) | quote }}
    executable = true
    path = "delta"
    stripComponents = 1
    refreshPeriod = "168h"
{{- end }}

# bat - A cat clone with wings (syntax highlighting)
{{- if eq .chezmoi.os "windows" }}
[".local/bin/bat.exe"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "sharkdp/bat" (printf "bat-v*-%s-pc-windows-msvc.zip" (.chezmoi.arch | replace "amd64" "x86_64")) | quote }}
    executable = true
    path = "bat.exe"
    stripComponents = 1
    refreshPeriod = "168h"
{{- else }}
[".local/bin/bat"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "sharkdp/bat" (printf "bat-v*-%s-%s.tar.gz" (.chezmoi.arch | replace "amd64" "x86_64") (eq .chezmoi.os "darwin" | ternary "apple-darwin" (eq .chezmoi.os "android" | ternary "unknown-linux-gnu" "unknown-linux-gnu"))) | quote }}
    executable = true
    path = "bat"
    stripComponents = 1
    refreshPeriod = "168h"
{{- end }}

# fd - A simple, fast and user-friendly alternative to find
{{- if eq .chezmoi.os "windows" }}
[".local/bin/fd.exe"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "sharkdp/fd" (printf "fd-v*-%s-pc-windows-msvc.zip" (.chezmoi.arch | replace "amd64" "x86_64")) | quote }}
    executable = true
    path = "fd.exe"
    stripComponents = 1
    refreshPeriod = "168h"
{{- else }}
[".local/bin/fd"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "sharkdp/fd" (printf "fd-v*-%s-%s.tar.gz" (.chezmoi.arch | replace "amd64" "x86_64") (eq .chezmoi.os "darwin" | ternary "apple-darwin" (eq .chezmoi.os "android" | ternary "unknown-linux-gnu" "unknown-linux-gnu"))) | quote }}
    executable = true
    path = "fd"
    stripComponents = 1
    refreshPeriod = "168h"
{{- end }}

# ripgrep - Recursively search directories for a regex pattern
{{- if eq .chezmoi.os "windows" }}
[".local/bin/rg.exe"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "BurntSushi/ripgrep" (printf "ripgrep-*-%s-pc-windows-msvc.zip" (.chezmoi.arch | replace "amd64" "x86_64")) | quote }}
    executable = true
    path = "rg.exe"
    stripComponents = 1
    refreshPeriod = "168h"
{{- else }}
[".local/bin/rg"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "BurntSushi/ripgrep" (printf "ripgrep-*-%s-%s.tar.gz" (.chezmoi.arch | replace "amd64" "x86_64") (eq .chezmoi.os "darwin" | ternary "apple-darwin" (eq .chezmoi.os "android" | ternary "unknown-linux-gnu" "unknown-linux-gnu"))) | quote }}
    executable = true
    path = "rg"
    stripComponents = 1
    refreshPeriod = "168h"
{{- end }}

# 以降は windows ではインストールしない
{{- if ne .chezmoi.os "windows" }}

# z, fz, tmux-xpanes for bash users (zsh uses zplug)
{{- $shells := fromJson (includeTemplate "shell-detection.tmpl" .) }}
{{- if and $shells.uses_bash (ne .chezmoi.os "darwin") }}
[".local/share/z"]
    type = "git-repo"
    url = "https://github.com/rupa/z.git"
    refreshPeriod = "168h"

[".local/share/fz"]
    type = "git-repo"
    url = "https://github.com/changyuheng/fz.git"
    refreshPeriod = "168h"

[".local/share/tmux-xpanes"]
    type = "git-repo"
    url = "https://github.com/greymd/tmux-xpanes.git"
    refreshPeriod = "168h"
{{- end }}

{{- if $shells.uses_zsh }}
# Zim will be installed via Homebrew on macOS, git on other platforms
{{- if ne .chezmoi.os "darwin" }}
[".zim"]
    type = "git-repo"
    url = "https://github.com/zimfw/zimfw.git"
    refreshPeriod = "168h"
{{- end }}
{{- end }}

{{- if and $shells.uses_zsh (ne .chezmoi.os "darwin") }}

# Keep zplug for migration period - will be removed later
[".zplug"]
    type = "git-repo"
    url = "https://github.com/zplug/zplug.git"
    refreshPeriod = "168h"

# tmux plugin manager
[".tmux/plugins/tpm"]
    type = "git-repo"
    url = "https://github.com/tmux-plugins/tpm.git"
    refreshPeriod = "168h"
{{- end }}

{{- if and (ne .chezmoi.os "darwin") (ne .chezmoi.os "android") }}
# Version managers (Linux only - macOS uses Homebrew, Android uses system packages)

# Python environment manager
[".pyenv"]
    type = "git-repo"
    url = "https://github.com/pyenv/pyenv.git"
    refreshPeriod = "168h"

[".pyenv/plugins/pyenv-virtualenv"]
    type = "git-repo"
    url = "https://github.com/pyenv/pyenv-virtualenv.git"
    refreshPeriod = "168h"

# Node.js version manager
[".nvm"]
    type = "git-repo"
    url = "https://github.com/nvm-sh/nvm.git"
    refreshPeriod = "168h"

{{- end }}

{{- if ne .chezmoi.os "darwin" }}
# gitmux - Git status for tmux/byobu (Linux/Android/other OS)
# Note: Android uses Linux arm64 binary as gitmux doesn't provide android-specific builds
[".local/bin/gitmux"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "arl/gitmux" (printf "gitmux_*_%s_%s.tar.gz" (eq .chezmoi.os "android" | ternary "linux" .chezmoi.os) (.chezmoi.arch | replace "x86_64" "amd64" | replace "aarch64" "arm64")) | quote }}
    executable = true
    path = "gitmux"
    refreshPeriod = "168h"
{{- end }}

{{- if or (eq .chezmoi.os "linux") (eq .chezmoi.os "darwin") }}
# Development repositories for reference and contribution
["Sources/github-markdown-css"]
    type = "git-repo"
    url = "https://github.com/sindresorhus/github-markdown-css.git"
    refreshPeriod = "168h"

["Sources/Gogh"]
    type = "git-repo"
    url = "https://github.com/Mayccoll/Gogh.git"
    refreshPeriod = "168h"

["Sources/gitignore"]
    type = "git-repo"
    url = "https://github.com/github/gitignore.git"
    refreshPeriod = "168h"

{{- end }}
{{- end }}